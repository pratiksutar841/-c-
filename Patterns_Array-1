Q1 - Given two vectors arr1[] and arr2[] of size m and n sorted in increasing order. Merge the
two arrays into a single sorted array of size m+n.

Input:
Output:
Input:
Output:
arr1=[1,2,3] arr2=[4,5,6]
arr=[1,2,3,4,5,6]
arr1=[1,3,5] arr2=[2,4,6]
arr=[1,2,3,4,5,6]
int i=m-1; //first pointer
int j=n-1; //second pointer
int k=m+n-1;
int arr[m+n];
while(i>=0 && j>=0)
{
if(arr1[i]<arr2[j]) //comparing the two elements at which our
pointers are
{
arr[k--]=arr1[j--];
}else{
arr[k--]=arr2[i--];
}
}
while(j>=0)
{
arr[k--]=arr2[j--];
}
while(i>=0)
{
arr[k- -]=arr1[i–];
}
return arr;
========================================================================================================================================================================
Q2 - Given a vector arr[] sorted in increasing order of n size and an integer x, find if there exists
a pair in the array whose sum is exactly x.

Given: n>0
[-1,0,1,2,3] x=2
Yes
[1,2,3,4] x=9
No
Take 2 pointers i and j where i points at the start of the array and j points at the last index of the
array now:
if arr[i]+arr[j]<k this means that we need to increase either of arr[i] and arr[j] since j points at
the last index so we need to increase i++;
else do j–;
Input:
Output:
Input:
Output:


int i=0;
int j=n-1;
while(i<j)
{
if(arr[i]+arr[j]==x)
{
cout<<”Yes”;
break;
}else if(arr[i]+arr[j]>x)
{
j--;
}else{
i++;
}
}
cout<<”No”;
=======================================================================================================================================================================
Q3 - Given a vector arr[] sorted in increasing order of n size and an integer x, find if there exists
a pair in the array whose absolute difference is exactly x.


Given: n>0
[5,10,15,20,26] x= 10
Yes
[5,6,7,8,9] x=4
Yes
[9,23,45,69,78] x=56
No
Take 2 pointers i and j with i pointing at the beginning of the array and j pointing at the index next to i.
int i=0;
int j=1;
while(i<size && j<size)
{
if((arr[j]-arr[i])==(n))
{
cout<”Yes”;
}else if((arr[j]-arr[i] )< (n))
{
j++;
}else{
i++;
}
}
cout<<”No”;
=======================================================================================================================================================================
Q4 - Given a vector arr[] sorted in increasing order. Return an array of squares of each
number sorted in increasing order. Where size of vector 1<size<101.

Input:
Output:
Input:
Output:
Input:
Output:
[0,1,2,3]
[0,1,4,9]
[-5,-4,-3,-2,-1]
[1,4,9,16,25]
[-4,-3,-1,0,2,10]
[0,2,4,9,16,100]
int i=0;
int j=arr.size()-1;
vector<int> ans(nums.size(),0);
int ind=nums.size()-1;
while(i<=j && ind>=0)
{
if(abs(nums[i])>abs(nums[j])) //compare the absolute values at the two pointers
and based upon the comparison push the square of value with smaller absolute value in the
answer vector.
{
ans[ind]=arr[i]*arr[i];
ind--;
i++;
}else{
ans[ind]=arr[j]*arr[j];
ind--;
j--;
}
}
return ans;
=======================================================================================================================================================================
Q5 - Given a vector arr[] sorted in increasing order of n size and an integer x, find the number
of unique pairs that exist in the array whose absolute sum is exactly x.

Input:
Output:
Explanation:
Input:
Output:
Explanation:
Input:
Output:
Explanation:
[1,2,3,4,6] x=7
2
1,6 and 3,4 sum to 7
[3,1,3,5,3] x=6
2
The unique pairs are 3,3 and 1,5
[2,2,2] x=4
1
The only unique pair is 2,2
int ans = 0;
int i=0, j=arr.size()-1;
while(i < j){
if(arr[i] + arr[j] == k){ // found elements just increase counter
ans++;
i++;
j--;
}
else if(arr[i] + arr[j] > k) j--; // sum is large so decrease the bigger element, i.e.
jth element
else i++; // sum is small so increase the smaller element, i.e. ith element
}
return ans;
======================================================================================================================================================================

Q6 - Given a vector array nums, print the count of triplets [nums[i], nums[j], nums[k]] such
that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == x. Where k is an integer
given by the user.
Note: The solution set must not contain duplicate triplets and should not have 3 loops.
Input:
Output:
Explanation:
Input:
Output:
[-1,0,1,2,-1,-4] x=0
2
The two triplets are: -1,0,1 and 1,2,-1
[1,2,3] x=5
0
Problem is similar to two sum, we just need an extra loop which is the third element in each iteration and thus
subtract it from the required sum and then run 2 sum on the vector.In two sum problem we had the relation
a+b=x, here we have a+b+c=x which means a+b=x-c, therefore we need to find a & b which satisfies this
equation for different possible values of c.
int count=0;
for(int i=0;i<nums.size();i++) //extra loop
{
int j=i+1;
int k=nums.size()-1;
int val=x-nums[i];
while(j<k) //normal two sum problem
{
int sum=nums[j]+nums[k];
if(sum<val)
{
j++;
}else if(sum>val){
k--;
}else{
vector<int> temp={nums[i],nums[j],nums[k]};
count++;
while(j<k && nums[j]==temp[1]) //doing this so that there are no same
triplets
{
j++;
}
while(j<k && nums[k]==temp[2]) // doing this so that one triplet is
counted once
{
k--;
}
}
}
while(i+1<nums.size() && nums[i]==nums[i+1]) // doing this so that one triplet
is counted once
{
i++;
}
}
return count;
